#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():

    # This is the function you should edit.
    # You can use prcase() to print the value to the case
    def onecase():
        numA = 0
        Q = 10
        xmax = 10
        prcase(Q)
        for i in range(Q):
            while True:
                tp = randrange(1, 4)
                if numA == 0 and tp == 2:
                    continue
                break
            if tp == 1:
                x = randrange(0, xmax + 1)
                prcase(1, x)
                numA += 1
            elif tp == 2:
                prcase(2)
                numA -= 1
            else:
                prcase(3)

        # n = randrange(1, 11)
        # prcase(n)
        # prcase(show_list([randrange(1, 5) for _ in range(n)]))
        # lst = [choice("NSEW") for _ in range(n)]
        # prcase(show_list(lst))

    # do not edit
    def prcase(*args):
        nonlocal case
        for i, a in enumerate(args):
            if i > 0:
                case += ' '
            case += str(a)
        case += '\n'

    # do not edit
    while True:
        case = ''
        onecase()
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
