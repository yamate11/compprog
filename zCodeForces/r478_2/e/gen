#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():
    while True:
        n = 3
        q = 10
        case = f'{n} {q}\n'
        while True:
            x = [0] * 3
            y = [0] * 3
            for i in range(3):
                x[i] = randrange(-100, 101)
                y[i] = randrange(-100, 101)
            x1 = x[1] - x[0]
            y1 = y[1] - y[0]
            x2 = x[2] - x[0]
            y2 = y[2] - y[0]
            if x1 * y2 != y1 * x2:
                for i in range(3):
                    case += f'{x[i]} {y[i]}\n'
                break
        pinA = 1
        pinB = 2
        for _ in range(q):
            tp = randrange(1, 3)
            if tp == 1:
                t = randrange(1, n + 1)
                if randrange(2) == 0:
                    f = pinA
                    pinA = t
                else:
                    f = pinB
                    pinB = t
                case += f'{tp} {f} {t}\n'
            else:
                v = randrange(1, n + 1)
                case += f'{tp} {v}\n'
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
