#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle, sample

def choose2(l, r, ordered=False):
    if r < l + 2:
        raise Exception(f'Fatal: choose2: r < l + 2 should hold.  (l = {l}, r = {r})')
    while True:
        (x, y) = sample(range(l, r), 2)
        return (y, x) if not ordered and x > y else (x, y)

class Case:
    def __init__(self):
        self.buf = ''

    def p(self, *args):
        def cvt(a):
            if isinstance(a, list):
                return ' '.join(map(str, a))
            else:
                return str(a)
        self.buf += ' '.join(map(cvt, args)) + '\n'

def generate():
    while True:
        case = Case()
        onecase(case)
        yield case.buf

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    end_mark = '^__=end=__^'
    end_file_mark = '^__=end_file=__^'

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

######################################################################
# This is the function you should edit.
# You can use case.p() to print the value to the case
def onecase(case):
    n = randrange(2, 10)
    m = randrange(2, n + 1)
    q = randrange(1, 20)
    vlim = 10
    xs2 = list(range(1, n - 1))
    shuffle(xs2)
    xs = [0, n - 1] + xs2
    case.p(n, m, q)
    case.p([x + 1 for x in xs[:m]])
    case.p([randrange(1, vlim) for _ in range(m)])
    for _ in range(q):
        if m == n:
            t = 2
        else:
            t = randrange(1, 3)
        if t == 1:
            case.p(1, xs[m], randrange(1, vlim))
            m += 1
        else:
            (l, r) = choose2(1, n + 1)
            case.p(2, l, r)

main()
