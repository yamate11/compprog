--- bad.cc	2020-10-18 20:09:05.600908100 +0900
+++ cans.cc	2020-10-18 20:06:00.197911200 +0900
@@ -3,8 +3,8 @@
 typedef long long int ll;
 using namespace std;
 
-// @@ !! LIM(debug segTree)
-// --> f:<< debug segTree
+// @@ !! LIM(debug segTree cmpNaive)
+// --> f:<< debug segTree cmpNaive
 // ---- inserted function << from util.cc
 template <typename T1, typename T2>
 ostream& operator<< (ostream& os, const pair<T1,T2>& p) {
@@ -179,23 +179,23 @@
 }
 
 #if DEBUG
-#define DLOG(...)        dbgLog(__VA_ARGS__)
-#define DFMT(...)        cerr << dbgFormat(__VA_ARGS__) << endl
-#define DCALL(func, ...) func(__VA_ARGS__)
+  #define DLOG(...)        dbgLog(__VA_ARGS__)
+  #define DFMT(...)        cerr << dbgFormat(__VA_ARGS__) << endl
+  #define DCALL(func, ...) func(__VA_ARGS__)
 #else
-#define DLOG(...)
-#define DFMT(...)
-#define DCALL(func, ...)
+  #define DLOG(...)
+  #define DFMT(...)
+  #define DCALL(func, ...)
 #endif
 
 #if DEBUG_LIB
-#define DLOG_LIB(...)        dbgLog(__VA_ARGS__)
-#define DFMT_LIB(...)        cerr << dbgFormat(__VA_ARGS__) << endl
-#define DCALL_LIB(func, ...) func(__VA_ARGS__)
+  #define DLOG_LIB(...)        dbgLog(__VA_ARGS__)
+  #define DFMT_LIB(...)        cerr << dbgFormat(__VA_ARGS__) << endl
+  #define DCALL_LIB(func, ...) func(__VA_ARGS__)
 #else
-#define DLOG_LIB(...)
-#define DFMT_LIB(...)
-#define DCALL_LIB(func, ...)
+  #define DLOG_LIB(...)
+  #define DFMT_LIB(...)
+  #define DCALL_LIB(func, ...)
 #endif
 
 // ---- end debug.cc
@@ -205,27 +205,27 @@
 // considering the binary search.
 
 template <typename DAT, typename OP,
-	  typename Fadd, typename Fcomp, typename Fappl>
+	  typename Fadd, typename Fcomp, typename Fappl> 
 struct SegTree {
-  int size;     // power of two; >= 2
+  int size;	     // power of two; >= 2
   int height;        // size = 1 << height;
   vector<DAT> node;  // vector of size 2*size.
-  // 0                 : unused
-  // 1    ... size-1   : interval
-  // size ... 2*size-1 : leaf
+                     // 0                 : unused
+                     // 1    ... size-1   : interval
+                     // size ... 2*size-1 : leaf
   vector<OP> susp;   // vector of size size.
-  // suspended operation FOR CHILDREN
-  // (already applied to this node)
+                     // suspended operation FOR CHILDREN
+                     // (already applied to this node)
   DAT unit_dat;
   OP unit_op;
   Fadd add;
   Fcomp comp;
   Fappl appl;
   bool range_update;
-
+    
   SegTree(DAT unit_dat_, OP unit_op_, Fadd add_, Fcomp comp_, Fappl appl_,
 	  bool range_update_)
-  // , vector<DAT> initdat)
+    // , vector<DAT> initdat) 
     : unit_dat(unit_dat_), unit_op(unit_op_), add(add_), comp(comp_),
       appl(appl_), range_update(range_update_) {}
 
@@ -401,13 +401,116 @@
 }
 
 // ---- end segTree.cc
-// @@ !! LIM  -- end mark --
+// ---- inserted library file cmpNaive.cc
+
+const string end_mark("^__=end=__^");
+const string end_file_mark("^__=end_file=__^");
+
+int naive(istream& cin, ostream& cout);
+int body(istream& cin, ostream& cout);
+
+void cmpNaive() {
+  while (true) {
+    string s;
+    getline(cin, s);
+    bool run_body;
+    if (s.at(0) == 'Q') {
+      return;
+    }else if (s.at(0) == 'B') {
+      run_body = true;
+    }else if (s.at(0) == 'N') {
+      run_body = false;
+    }else {
+      cerr << "Unknown body/naive specifier.\n";
+      exit(1);
+    }
+    string input_s;
+    while (true) {
+      getline(cin, s);
+      if (s == end_mark) break;
+      input_s += s;
+      input_s += "\n";
+    }
+    stringstream ss_in(move(input_s));
+    stringstream ss_out;
+    if (run_body) {
+      body(ss_in, ss_out);
+    }else {
+      naive(ss_in, ss_out);
+    }
+    cout << ss_out.str() << end_mark << endl;
+  }
+}
 
-int main(/* int argc, char *argv[] */) {
+int main(int argc, char *argv[]) {
   ios_base::sync_with_stdio(false);
   cin.tie(nullptr);
   cout << setprecision(20);
 
+#if CMPNAIVE
+  if (argc == 2) {
+    if (strcmp(argv[1], "cmpNaive") == 0) {
+      cmpNaive();
+    }else if (strcmp(argv[1], "naive") == 0) {
+      naive(cin, cout);
+    }else {
+      cerr << "Unknown argument.\n";
+      exit(1);
+    }
+  }else {
+#endif
+    body(cin, cout);
+#if CMPNAIVE
+  }
+#endif
+  return 0;
+}
+
+/*
+int naive(istream& cin, ostream& cout) {
+  return 0;
+}
+int body(istream& cin, ostream& cout) {
+  return 0;
+}
+*/
+
+// ---- end cmpNaive.cc
+// @@ !! LIM  -- end mark --
+
+int naive(istream& cin, ostream& cout) {
+  ll n; cin >> n;
+  string s; cin >> s;
+
+  auto func = [&](ll l, ll r) -> ll {
+    string t = s.substr(l, r - l);
+    ll ret = 0;
+    ll c = 0;
+    for (ll i = 0; i < (ll)t.size(); i++) {
+      if (t[i] == '0') {
+	ret = max(ret, c);
+	c = 0;
+      }else {
+	c++;
+      }
+    }
+    ret = max(ret, c);
+    // DLOG("t=", t, "ret=", ret);
+    return ret;
+  };
+
+  ll ans = 0;
+  for (ll l = 0; l < n; l++) {
+    for (ll r = l + 1; r <= n; r++) {
+      ans += func(l, r);
+    }
+  }
+  cout << ans << endl;
+
+  return 0;
+}
+int body(istream& cin, ostream& cout) {
+
   ll n; cin >> n;
   string s; cin >> s;
   ll ans = 0;
@@ -422,8 +525,8 @@
   auto xAppl = [](int k, OP f, DAT x) -> DAT { return k * f + x; };
   auto xComp = [](OP h, OP g) -> OP { return h + g; };
   auto st = make_seg_tree(unit_dat, unit_op, xAdd, xComp, xAppl, true);
-
-  vector<ll> init(n, n);
+  
+  vector<ll> init(n + 1, n);
   st.set_data(init);
 
   for (ll i = n - 1; i >= 0; i--) {
