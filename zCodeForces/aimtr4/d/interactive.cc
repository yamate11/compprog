#include <bits/stdc++.h>
#include <cassert>
typedef long long int ll;
using namespace std;

/*
  interactive.cc -- skelton for interactive question

  You should define the following:
  * Member functions in struct Judge.  You also need to decide 
    arguments type and return type.
      * Judge() (constructor)
      * init()
      * ask()
      * answer()
    "if (testing)" part is for local testing.  You need to keep track
    of the input given in ask() and need to judge whether the answer is
    correct when anaswer() is called.
    "else" part is for real program.
  * Function solve().  The signature is "void solve(Judge& judge)".
    You need to implement the answer algorithm in this function, using
    judge.ask() etc.

  Run:
      ./cans
         ... The responces are to be given in stdin.
      ./cans judge < din.txt
         ... One-shot testing. Note that the format of din.txt is not
             defined by the question.  You can freely set the spec for
             the input file.
      cmpNaive -i -e -p './cans judge'
         ... cmpNaive testing.  Runs multiple times against test files
             generated by `gen' script.  A test run is regarded as a success
             if its exit code is zero.

 */

// @@ !! LIM()

//////////////////////////////////////////////////////////////////////
// See help of libins command for dependency spec syntax.
// @@ !! BEGIN() ---- cmpNaive.cc

const string end_mark("^__=end=__^");

struct SolveExc : exception {};

struct Judge {
  bool testing;   // TRUE for local testing, FALSE for real program.
  // You always need the bool member testing.
  // Other members can be freely added.  Mainly for testing purposes.
  ll sz;
  ll expected;

  Judge(bool testing_) : testing(testing_) {
    if (testing) {
      // Typically, the question for testing is read from stdin.
      cin >> sz >> expected;
    }else {
      // Real initial input is to be written here, if any.
      cin >> sz;
    }
  }

  ll init() {
    // Initial input
    return sz;
  }

  string ask(int x) {
    if (testing) {
      return x == expected ? "EQ" : x < expected ? "LT" : "GT";
    }else {
      // Information asking.  Typically prepended by "? " and followed by endl
      cout << "? " << x << endl;
      string rep; cin >> rep;
      return rep;
    }
  }

  void answer(int x) {
    if (testing) {
      // Always call ac() or wa().
      if (x == expected) ac();
      wa();
    }else {
      // Final output.  Typically prepended by "! " and followed by endl
      cout << "! " << x << endl;
      // Need to throw SolveExc()
      throw SolveExc();
    }
  }

  void wa() {
    cout << "WA\n";
    exit(1);
  }

  void ac() {
    cout << "AC\n";
    throw SolveExc();
  }
};

void solve(Judge& judge);

int main(int argc, char *argv[]) {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << setprecision(20);

  bool is_judge = false;
  if (argc == 2) {
    if (strcmp(argv[1], "judge") == 0) {
      is_judge = true;
    }else if (strcmp(argv[1], "skip") == 0) {
      return 0;
    }else {
      cerr << "Unknown argument\n";
      exit(1);
    }
  }
    
  try {
    Judge judge(is_judge);
    solve(judge);
  }catch (const SolveExc& e) {
  }
  return 0;
}

/* 
   Copy and edit the following into the part below !! END
 */
/*
void solve(Judge& judge) {
  ll left = 1;
  ll right = judge.init();
  while (true) {
    ll mid = (left + right) / 2;
    string rep = judge.ask(mid);
    if (rep == "EQ") judge.answer(mid);
    if (rep == "LT") left = mid;
    if (rep == "GT") right = mid;
  }
}
*/

// @@ !! END ---- interactive.cc

void solve(Judge& judge) {
  ll left = 1;
  ll right = judge.init();
  while (true) {
    ll mid = (left + right) / 2;
    string rep = judge.ask(mid);
    if (rep == "EQ") judge.answer(mid);
    if (rep == "LT") left = mid;
    if (rep == "GT") right = mid;
  }
}
