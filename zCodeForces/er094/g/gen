#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():
    while True:
        n = 300000
        m = 20
        case = f'{n} {m}\n'
        for i in range(n):
            l = randrange(1, n)
            r = randrange(l + 1, n + 1)
            case += f'{l} {r}\n'
        d = set()
        for i in range(m):
            while True:
                # a = randrange(1, n)
                # b = randrange(a + 1, n + 1)
                a = randrange(1, m)
                b = randrange(a + 1, m + 1)
                if (a, b) not in d:
                    break
            d.add((a, b))
            case += f'{a} {b}\n'
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 0):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
