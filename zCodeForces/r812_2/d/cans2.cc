#include <bits/stdc++.h>
#include <cassert>
typedef long long int ll;
using namespace std;
#define REP2(i, a, b) for (ll i = (a); i < (b); i++)
#define REP2R(i, a, b) for (ll i = (a); i >= (b); i--)
#define REP(i, b) REP2(i, 0, b)
#define ALL(coll) (coll).begin(), (coll).end()
#define SIZE(v) ((ll)((v).size()))

/*
  Skelton for Interactive Problems

  (1) Edit the following member functions in JudgeRem class 
      They are for adjusting the interface.
      - constructor
      - ask()   (or ask_q() and ask_a())
      - answer()
  (2) Write function game().  This is for writing your algorithm.
  (3) For hand debugging, compile and run.
  (4) For automated testing, do the following
  (4.1) Set the value of macro JUDGE_LOC to 1.
  (4.2) Edit JudgeLoc struct

  Testing
    (*) ./cans
       This is the true program.  You can manually input data into its
       stdin.
    (**) ./cans judge < din.txt
       One-shot testing.  The format of din.txt is not defined by the
       writer of the question.  You can freely set the spec for the input
       file so that JudgeLoc() can read the input.
    (***) cmpNaive -i -e -p './cans judge'
       cmpNaive testing.  Runs multiple times against test files
       generated by `gen' script.  A test run is regarded as a success
       if its exit code is zero.
 */

// @@ !! LIM()

// When you debug with JudgeLoc class, the value should be 1
// #define JUDGE_LOC 0
#define JUDGE_LOC 1

const string end_mark("^__=end=__^");

struct SolveExc : exception {};

void do_game(bool is_judge);

int main(int argc, char *argv[]) {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << setprecision(20);

  bool is_judge = false;
  if (argc == 2) {
    if (strcmp(argv[1], "judge") == 0) {
      is_judge = true;
    }else if (strcmp(argv[1], "skip") == 0) {
      return 0;
    }else {
      cerr << "Unknown argument" << endl;
      exit(1);
    }
  }
    
  ll T; cin >> T;
  REP(_t, T) {
    try {
      do_game(is_judge);
    }catch (const SolveExc& e) {
    }
  }
  return 0;
}

/* External variables, typically for values given as initial input. */
ll N;

struct Judge {
  virtual ll ask(ll a, ll b) = 0;
  virtual void answer(ll x) = 0;

  // Call ac() in JudgeLoc when the answer is correct.
  void ac() {
    cout << "AC" << endl;
    throw SolveExc();
  }

  // Call wa() in JudgeLoc when the answer is not correct.
  void wa() {
    cout << "WA" << endl;
    exit(1);
  }
};

#if JUDGE_LOC
// This is a class for local testing.
struct JudgeLoc : Judge {
  vector<ll> wincnt;

  JudgeLoc() {
    cin >> N;
    ll M = 1LL << N;
    vector<ll> A(M);
    wincnt.resize(M);
    REP(i, M) cin >> A[i];
    vector<ll> cur(M);
    REP(i, M) cur[i] = i;
    while (SIZE(cur) > 1) {
      auto prev = move(cur);
      cur = vector<ll>();
      REP(i, SIZE(prev) / 2) {
        if (A[prev[2*i]] > A[prev[2*i + 1]]) {
          cur.push_back(prev[2*i]);
          wincnt[prev[2*i]]++;
        }else {
          cur.push_back(prev[2*i + 1]);
          wincnt[prev[2*i + 1]]++;
        }
      }
    }
  }

  // Returns the answer for a query x.
  ll ask(ll a, ll b) {
    if (wincnt[a - 1] > wincnt[b - 1]) return 1;
    if (wincnt[a - 1] < wincnt[b - 1]) return 2;
    return 0;

    // An example for Guessing Number Game.
    /*
    if (x < expected)      return 1;
    else if (x > expected) return -1;
    else                   return 0;
    return ask_a_t();
    */
  }

  // Always call ac() or wa().
  void answer(ll x) {
    if (wincnt[x - 1] == N) ac();
    else wa();

    /*
    if (x == expected) ac();
    else wa();
    */
  }
};
#endif // JUDGE_LOC

// The class that implements interfaces to the external judge program.
struct JudgeRem : Judge {

  // Read initial information in the constructor.  
  // Typically you need to read a parameter
  // such as the size of the question.  You may want to define a global
  // variable, such as N, just the above of line of "struct Judge{".
  JudgeRem() {
    cerr << "waiting for N" << endl;
    cin >> N;
    cerr << "N is " << N << endl;
  }

  // Asks for and receives information
  ll ask(ll a, ll b) {
    cout << "? " << a << " " << b << endl;
    cerr << "waiting for the answer." << endl;
    ll ret; cin >> ret;
    cerr << "The answer was " << ret << endl;
    return ret;
  }

  // Final output.  Typically prepended by "! " and followed by endl
  // You need to throw SolveExc() at the end of the function.
  void answer(ll x) {
    cout << "! " << x << endl;
    throw SolveExc();
  }

};

// You write your algorithm using judge.ask()
// (or judge.ask_a() and judge.ask_q()).
// Note that you need to call judge.answer() to correctly terminate
// the program.
void game(Judge&& judge) {
  auto two = [&](ll a, ll b) {
    ll p = judge.ask(a, b);
    if (p == 1) return a;
    else if (p == 2) return b;
    else assert(0);
  };

  auto four = [&](ll a, ll b, ll c, ll d) {
    ll p = judge.ask(a, c);
    if (p == 1) return two(a, d);
    else if (p == 2) return two(b, c);
    else if (p == 0) return two(b, d);
    else assert(0);
  };

  ll M = 1LL << N;
  vector<ll> cur(M);
  REP(i, M) cur[i] = i + 1;
  while (true) {
    if (SIZE(cur) == 1) judge.answer(cur[0]);
    if (SIZE(cur) == 2) judge.answer(two(cur[0], cur[1]));
    auto prev = move(cur);
    cur = vector<ll>();
    REP(i, SIZE(prev) / 4) {
      ll w = four(prev[i * 4], prev[i * 4 + 1], prev[i * 4 + 2], prev[i * 4 + 3]);
      cur.push_back(w);
    }
  }


  /*
  // example for Guessing Number Game
  ll left = 1;
  ll right = sz;
  while (true) {
    ll mid = (left + right) / 2;
    ll reply = judge.ask(mid);
    if (reply == 0) judge.answer(mid);
    if (reply == -1) right = mid - 1;
    if (reply == 1)  left  = mid + 1;
  }
  */
}

// You should not edit this function.
void do_game(bool is_judge) {
#if JUDGE_LOC
  if (is_judge) game(JudgeLoc());
  else          game(JudgeRem());
#else
  game(JudgeRem());
#endif
}


