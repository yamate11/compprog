#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():
    while True:
        n = 100000
        q = 100000
        lim = 100000
        # n = 10
        # q = 100
        # lim = 500
        lst = [randrange(1, lim) for _ in range(n)]
        case = f'''{n} {q}
{show_list(lst)}
'''
        for i in range(q):
            t = randrange(1, 3)
            if t == 1:
                l = randrange(1, n + 1)
                r = randrange(1, n + 1)
                if l > r:
                    (l, r) = (r, l)
                case += f'{t} {l} {r}\n'
            else:
                p = randrange(1, n + 1)
                x = randrange(1, lim)
                case += f'{t} {p} {x}\n'
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 0):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
