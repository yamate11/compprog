#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    n = 6
    for x in range(16):
        vec = [0, 0, 0, 0]
        vec[0] = 'A' if (x & 1) else 'B'
        vec[1] = 'A' if (x & 2) else 'B'
        vec[2] = 'A' if (x & 4) else 'B'
        vec[3] = 'A' if (x & 8) else 'B'
        yield f'{n}\n{vec[0]}\n{vec[1]}\n{vec[2]}\n{vec[3]}\n'

# or E.g.,

def generate_random():
    while True:
        x = randrange(1, 10)
        lst = [randrange(0, 5) for _ in range(x)]
        cdir = choice(['N', 'E', 'S', 'W'])
        case = f'''{x}
{show_list(lst)}
{cdir}
'''
        yield case

generate = generate_seq
# generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
