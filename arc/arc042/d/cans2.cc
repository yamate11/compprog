#include <bits/stdc++.h>
#include <cassert>
typedef long long int ll;
using namespace std;

// @@ !! LIM(mod f:power)
// --> f:gcd mod f:power
// ---- inserted function gcd from util.cc
// g = eGCD(a, b, s, t)  --->  sa + tb = g
constexpr ll eGCD(ll a, ll b, ll& s, ll& t) {
  if (a == 0) {
    s = 0;
    t = 1;
    return b;
  }
  ll u = 0;
  ll g = eGCD(b % a, a, t, u);
  s = u - (b / a) * t;
  return g;
}

constexpr ll gcd(ll a, ll b) {
  ll dummy1 = 0;
  ll dummy2 = 0;
  return eGCD(a, b, dummy1, dummy2);
}
// ---- end gcd
// ---- inserted library file mod.cc

ll MOD = 1e9 + 7;
// ll MOD = 998244353;

struct Fp {
  ll val;

  Fp(ll t = 0) {
    if      (t >= MOD)  val = t % MOD;
    else if (t >= 0)    val = t;
    else if (t >= -MOD) val = t + MOD;
    else {
      ll v = t % MOD;
      if (v == 0) val = 0;
      else        val = v + MOD;
    }
  }

  Fp& operator +=(const Fp& t) {
    val += t.val;
    if (val >= MOD) val -= MOD;
    return *this;
  }

  Fp& operator -=(const Fp& t) {
    val -= t.val;
    if (val < 0) val += MOD;
    return *this;
  }

  Fp& operator *=(const Fp& t) {
    val = (val * t.val) % MOD;
    return *this;
  }

  Fp inv() const {
    if (val == 0) {
      cerr << "inv() is called for zero." << endl;
      exit(1);
    }
    ll u = 0;
    ll v = 0;
    eGCD(val, MOD, u, v);
    return Fp(u);
  }

  Fp& operator /=(const Fp& t) {
    return (*this) *= t.inv();
  }

  Fp operator +(const Fp& t) const { return Fp(val) += t; }
  Fp operator -(const Fp& t) const { return Fp(val) -= t; }
  Fp operator *(const Fp& t) const { return Fp(val) *= t; }
  Fp operator /(const Fp& t) const { return Fp(val) /= t; }
  Fp operator -() const { return Fp(-val); }

  bool operator ==(const Fp& t) const { return val == t.val; }
  bool operator !=(const Fp& t) const { return val != t.val; }
  
  operator ll() const { return val; }

};

class Comb {
  int nMax;
  vector<Fp> vFact;
  vector<Fp> vInvFact;
public:
  Comb(int nm) : nMax(nm), vFact(nm+1), vInvFact(nm+1) {
    vFact.at(0) = 1;
    for (int i = 1; i <= nMax; i++) vFact.at(i) = i * vFact.at(i-1);
    vInvFact.at(nMax) = vFact.at(nMax).inv();
    for (int i = nMax; i >= 1; i--) vInvFact.at(i-1) = i * vInvFact.at(i);
  }
  Fp fact(int n) { return vFact.at(n); }
  Fp comb(int n, int r) {
    return vFact.at(n) * vInvFact.at(r) * vInvFact.at(n-r);
  }
  // The number of permutation extracting r from n.
  Fp perm(int n, int r) {
    return vFact.at(n) * vInvFact.at(n-r);
  }
};

// ---- end mod.cc
// ---- inserted function power from util.cc
/* *** WARNING ***  
      ll x = power(10, 12) 
   does not work since it is interpreted as 
      ll x = power<int>((int)10, 12)
   Use power<ll>(10, 12) or power(10LL, 12).
 */
template<typename T>
T power(T a, ll b) {
  T twoPow = a;
  T rv(1);
  while (b > 0) {
    if (b & 1LL) rv *= twoPow;
    twoPow *= twoPow;
    b >>= 1;
  }
  return rv;
}
// ---- end power
// @@ !! LIM  -- end mark --

void readDat();
vector<ll> ix, ip, ia, ib, rs;

int solve() {
  ll X, P, A, B; cin >> X >> P >> A >> B;
  if (X == 1) return 1;
  if (B - A >= P - 2) return 1;
  for (ll i = 0; i < 130; i++) {
    if (ix.at(i) == X && ip.at(i) == P && ia.at(i) == A && ib.at(i) == B) {
      return rs.at(i);
    }
  }
  MOD = P;
  Fp t = power<Fp>(X, A);
  ll ans = P;
  for (ll i = 0; i <= B - A; i++) {
    ans = min(ans, ll(t));
    if (ans == 1) return 1;
    t *= Fp(X);
  }
  return ans;
}

int main(int argc, char *argv[]) {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << setprecision(20);

  // cout << solve() << endl;

  readDat();
  cout << solve() << endl;
  return 0;
}

void readDat() {
  string inp = " \
1836808 715191791 114801 139224317 \
380349312 1061406287 562 629713442 \
895341 1034615039 13 940848964 \
106563045 675924787 8983246 366016923 \
657530 347058493 37379489 174456110 \
3855 1004269393 157592 159252060 \
2 959631769 104117543 350315322 \
1868864 113380427 14 106792404 \
202099165 853188659 0 536692034 \
149832371 797349491 979970205 1699688444 \
3796539 979740053 3 397272642 \
351 412394287 6107277 130471000 \
673180886 948738899 1792 171014948 \
540766 762292373 3013955 670414331 \
26 597801691 1 356573867 \
27 166705249 182 116870905 \
22076 723435337 0 379354339 \
17 704086507 233 184607109 \
30 518370649 11476288 135741002 \
618 203377771 1951 198191183 \
189678 2122502351 3863 1432503248 \
44372 1801577279 13176632 413568271 \
50677241 394762513 279220 256649525 \
368670 896966267 120003375 289613396 \
155526062 449341589 121361 265546928 \
445562 1211273659 6 202701493 \
32828316 1083020299 0 521435788 \
374 1394585719 798 1136229707 \
25 1678607599 102138254 469664189 \
757731 1537258993 1 464857580 \
6 1190953903 7988573 243118996 \
3305 804899441 2302 341039473 \
33 974846393 330429 429332398 \
125 424250207 7 111762780 \
4 1829827763 65 164578327 \
26212542 127934621 12497313 116714365 \
1066162 1498788883 122 120339882 \
84975957 2074391453 2 122097584 \
462301 1850179753 965493465 1250148719 \
44583 1168897979 15813 221329132 \
1483704 961383887 549 450597590 \
18 719301097 0 108434705 \
3253 137277121 403 102606603 \
13786 1060936207 196238286 322037040 \
45 1264969127 6 482629308 \
3 1446630443 27822639 295448875 \
811 1585895033 1 124739694 \
55 2111153383 210831 372164264 \
22974 1115198951 47 778451409 \
21200 1596236771 4584626 349459311 \
3007 1748408087 460 468322423 \
50 729668657 10 316903338 \
32 349236499 6700 201370701 \
6900 150248393 182695 112471877 \
25901758 1822825009 189 166788890 \
300598 2034575887 710910 607400389 \
37516241 1538535059 6226911 288209950 \
98252577 272654407 5469 236608288 \
24810715 1001133923 382208577 967355555 \
27205557 653271439 0 209346815 \
623548740 1196059979 2418081 776079513 \
6 1094417053 4788 254525825 \
9134 1423460693 233719 854527838 \
561 675165067 1539863 621128548 \
2 2005613549 0 113755926 \
181 1083772793 10 214723183 \
32517 1770027433 48 1003860858 \
483932440 1620904469 816867 503803596 \
3726591 1114377907 2604 208094457 \
191852663 1469005157 111 832801318 \
53600 1049261237 320972 193847491 \
23970 255575729 727201 124916343 \
20938216 728319847 10127 642330140 \
2975521 480895691 2498406 438114690 \
4 809789107 1 117570084 \
2717 1142757719 0 755928545 \
59 1285692601 3 1240274372 \
21 1375611683 13255486 325025658 \
359 1878093379 16933 180124258 \
102 2048024057 523 662222013 \
25848 320279611 896453 223796824 \
31 837161807 20835394 347785509 \
15551 443889781 11921965 233754939 \
7723352 948191039 636379 350148663 \
161232 761728229 152 152704744 \
3307599 293697233 2168 250655442 \
20699 657536959 0 280563162 \
1315378 704587309 8 368001686 \
471 1008473723 113 137071689 \
434 722869177 141811696 548847757 \
220 910830901 0 436513331 \
36712555 675377011 21 188701320 \
19 702749351 2 233356196 \
119706685 255892501 244 133167628 \
1375512 1006643543 12 410413399 \
32707 111985381 12942 106592767 \
406150 715674059 2730 379832302 \
12688910 1061905021 231657 191301937 \
228 752436767 7404991 130682614 \
4 960132571 28 168738857 \
2427 272579609 2140876 261886559 \
641 1003703117 3395 395468111 \
12032 774928603 1345865 173446032 \
3697 807863729 30868912 142189568 \
22 316015327 2015456 230438826 \
637 607498037 208 122281562 \
124 242986439 0 100908237 \
317485 747285179 24 132227501 \
5 2049102421 80 281561210 \
3725 1874977199 39664019 487360165 \
24 1933550141 17927651 726949932 \
5440716 1372497253 111846440 1467662329 \
93810 1284674311 0 164001979 \
375 1143838363 655 448688422 \
232 952888477 10607 223663388 \
597473794 727304503 9 301585115 \
63747997 1472181019 0 101938913 \
283258 1968092587 313 108545275 \
57480295 2085864961 19653 1101103458 \
3848431 1773205081 3718 207966141 \
30577 1058574061 95 458993019 \
40604986 285478343 908602 108024990 \
22 1793557067 644638 254397125 \
5 451705999 0 129606907 \
2523 672054553 60490913 313874339 \
19 1038978877 0 527538556 \
298 1236594869 4 130384383 \
455206 1385812327 7252 339098241 \
25779886 1199235781 40471 435352670 \
232346417 1000118423 4485623 236474468 \
";

  string res = " \
5 \
1 \
2 \
1 \
1 \
1 \
3 \
1 \
1 \
1 \
2 \
4 \
6 \
1 \
1 \
1 \
1 \
4 \
1 \
1 \
1 \
6 \
4 \
5 \
1 \
1 \
1 \
1 \
2 \
3 \
2 \
1 \
6 \
8 \
13 \
2 \
2 \
6 \
10 \
3 \
2 \
1 \
1 \
3 \
5 \
4 \
7 \
1 \
1 \
9 \
3 \
2 \
4 \
1 \
27 \
2 \
3 \
1 \
2 \
1 \
1 \
2 \
1 \
2 \
1 \
2 \
1 \
5 \
17 \
3 \
10 \
4 \
1 \
1 \
4 \
1 \
1 \
7 \
8 \
1 \
2 \
4 \
2 \
2 \
4 \
2 \
1 \
1 \
4 \
2 \
1 \
6 \
1 \
1 \
10 \
1 \
1 \
1 \
2 \
1 \
1 \
4 \
1 \
25 \
2 \
4 \
1 \
9 \
4 \
4 \
1 \
1 \
1 \
4 \
1 \
2 \
1 \
34 \
1 \
30 \
3 \
2 \
9 \
1 \
1 \
1 \
8 \
3 \
2 \
7 \
";
  
  stringstream ssQ(inp);
  stringstream ssR(res);
  for (ll i = 0; i < 130; i++) {
    ll x, p, a, b;
    ssQ >> x >> p >> a >> b;
    ix.push_back(x);
    ip.push_back(p);
    ia.push_back(a);
    ib.push_back(b);
    ll r;
    ssR >> r;
    rs.push_back(r);
  }


}
