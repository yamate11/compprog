#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():

    # This is the function you should edit.
    # You can use prcase() to print the value to the case
    def onecase():
        prcase(1)
        n = 4
        m = 4
        k = 2
        a = [['.' for _ in range(m)] for __ in range(n)]
        for i in range(k):
            while True:
                x = randrange(m)
                y = randrange(n)
                dx = choice([-1, 1])
                dy = choice([-1, 1])
                if 0 <= x + dx and x + dx < m and 0 <= y + dy and y + dy < n:
                    break
            a[y][x] = '*'
            a[y + dy][x] = '*'
            a[y][x + dx] = '*'
        if randrange(2) == 0:
            x = randrange(m)
            y = randrange(n)
            a[y][x] = '*'
        prcase(n, m)
        for line in a:
            prcase(''.join(line))

    # do not edit
    def prcase(*args):
        nonlocal case
        for i, a in enumerate(args):
            if i > 0:
                case += ' '
            case += str(a)
        case += '\n'

    # do not edit
    while True:
        case = ''
        onecase()
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
