#!/usr/bin/env python3

import argparse, sys
from random import randrange, choice, shuffle

def show_list(lst):
    return ' '.join(map(str,lst))

# Function generate() should yield test cases of type string repeatedly.
# E.g.,

def generate_seq():
    for x in range(1, 10):
        for cdir in ['N', 'E', 'S', 'W']:
            yield f'{x}\n{cdir}\n'

# or E.g.,

def generate_random():

    # This is the function you should edit.
    # You can use prcase() to print the value to the case
    def onecase():
        r = 8
        x = [0] * r
        h = []
        while True:
            t = randrange(0, 100)
            if t <= 25:
                y = randrange(0, r)
                x[y] += 1
                h.append((1, y))
            elif t <= 50:
                if sum(x) == 0:
                    continue
                while True:
                    y = randrange(0, r)
                    if x[y] > 0:
                        h.append((2, y))
                        x[y] -= 1;
                        break
            else:
                if sum(x) < 2:
                    continue
                h.append((3, 0))
                break
        prcase(len(h))
        for (p, q) in h:
            if p == 3:
                prcase(3)
            else:
                prcase(p, q)



        # n = randrange(1, 11)
        # prcase(n)
        # prcase(show_list([randrange(1, 5) for _ in range(n)]))
        # lst = [choice("NSEW") for _ in range(n)]
        # prcase(show_list(lst))

    # do not edit
    def prcase(*args):
        nonlocal case
        for i, a in enumerate(args):
            if i > 0:
                case += ' '
            case += str(a)
        case += '\n'

    # do not edit
    while True:
        case = ''
        onecase()
        yield case

# generate = generate_seq
generate = generate_random

######################################################################
# Hope that you need not edit the following code.

end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

def main():
    ap = argparse.ArgumentParser();
    ap.add_argument('-r', '--repeat', action='store_true',
                    help='Repeatedly generates cases',)
    args = ap.parse_args()

    try:
        if args.repeat:
            for s in generate():
                print(s.rstrip())
                print(end_mark)
            print(end_file_mark)
        else:
            for (i, s) in enumerate(generate()):
                print(s.rstrip())
                print(end_mark)
                if (i == 4):
                    break
    except BrokenPipeError as e:
        # print('caught: BrokenPipeError', file=sys.stderr)
        pass

main()
