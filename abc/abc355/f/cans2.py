#!/usr/bin/env python3

# generated by ChatGPT4o

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
        self.size = [1] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
                self.size[rootX] += self.size[rootY]
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
                self.size[rootY] += self.size[rootX]
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1
                self.size[rootX] += self.size[rootY]

def solve(input_data):
    import sys
    data = input_data.split()
    
    N = int(data[0])
    Q = int(data[1])
    
    edges = []
    index = 2
    for _ in range(N - 1):
        a = int(data[index]) - 1
        b = int(data[index + 1]) - 1
        c = int(data[index + 2])
        edges.append((c, a, b))
        index += 3

    queries = []
    for _ in range(Q):
        u = int(data[index]) - 1
        v = int(data[index + 1]) - 1
        w = int(data[index + 2])
        queries.append((w, u, v))
        index += 3

    edges.sort()
    uf = UnionFind(N)
    mst_weight = 0
    
    for c, a, b in edges:
        if uf.find(a) != uf.find(b):
            uf.union(a, b)
            mst_weight += c
    
    result = []
    for w, u, v in queries:
        uf_temp = UnionFind(N)
        uf_temp.parent = uf.parent[:]
        uf_temp.rank = uf.rank[:]
        uf_temp.size = uf.size[:]
        
        if uf_temp.find(u) != uf_temp.find(v):
            result.append(mst_weight + w)
        else:
            result.append(mst_weight)
    
    return "\n".join(map(str, result))

# Test with the provided input example
input_data = """4 4
1 2 6
2 3 5
2 4 4
1 3 3
1 2 3
1 4 10
3 4 1"""
print(solve(input_data))
