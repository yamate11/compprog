#!/usr/bin/env python3

# Game Solver
#   This code segment judges which player wins at a given position in a game
#   like NIM.   It is assumed that a player loses when he cannot move.
#
#   You should define functions moves and mkkey:
#
#     moves(v) returns the list of all positions movable from position v
#     mkkey(v) returns a hashable value for v.  If v is already hashable,
#              the identity function is OK.
#
#   Then, function judge(v) returns True if the player at v LOSES,
#   and returns False if the player at v wins.

# --- You should modify code from HERE(, and the main function).

# (The following code is for NIM.)

n = 3

#     moves(v) returns the list of all positions movable from position v
def moves(v):
    ret = []
    for i in range(n):
        for j in range(v[i]):
            w = v[:]
            w[i] = j
            ret.append(w)
    return ret

#     mkkey(v) returns a hashable value for v.  If v is already hashable,
#              the identity function is OK.
def mkkey(v):
    return (tuple(v))

# --- You should modify code to HERE.


# You need not edit function judge().
memo = {}
def judge(v):
    k = mkkey(v)
    if k not in memo:
        result = True
        for w in moves(v):
            if judge(w):
                result = False
                break
        memo[k] = result
    return memo[k]

def main():
    # Prints the winning places for the second player.
    m = 6
    for i in range(m):
        for j in range(i, m):
            for k in range(j, m):
                if judge([i,j,k]):
                    print(i,j,k)

main()
