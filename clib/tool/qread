#!/home/y-tanabe/.venv_10/bin/python

import sys, argparse, os, re
from bs4 import BeautifulSoup
import util
from util import warn, die, getPage, debug

args = None

# def conflictFiles(qdict):
#     files = []
#     for d in qdict:
#         if not os.path.isdir(d): continue
#         for f in os.listdir(d):
#             if f in ['q.html', 'Makefile', 'cans.cc'] or util.id_in_fname(f):
#                 files.append(f'{d}/{f}')
#     return files

def quest(contestName):
    qlist = 'qlist.html'
    if args.contest or not os.path.exists(qlist):
        url = f'https://atcoder.jp/contests/{contestName}/tasks'
        page = getPage(url)
        with open(qlist, 'w', encoding='UTF-8') as wfp:
            print(page, file=wfp, end='')
    with open(qlist, 'r', encoding='UTF-8') as fp:
        soup = BeautifulSoup(fp, 'lxml')
    qdict = {}
    for row in soup.table.find_all('tr')[1:]:
        qdict[row.a.string.lower()] = \
            'https://atcoder.jp' + row.a.attrs['href']
    if args.all_questions:
        return qdict
    retv = {}
    for x in args.quest:
        xx = x.lower()
        if xx not in qdict: die(f'Unknown question {x}')
        retv[xx] = qdict[xx]
    # debug("retv", retv)
    return retv

# We assume that samples are in <h3> tags....
def extractEg(qid, page):
    def sub(tag, exp, dic):
        if not tag.string: return
        mo = re.search(exp, tag.string)
        if not mo: return
        while tag:
            tag = tag.next_sibling
            if tag.name == 'pre': break
            if 'find_all' in dir(tag) and tag.find_all('pre'):
                tag = tag.pre
                break
        if not tag:
            print("Warning: Failed to find pre tag.", file=sys.stderr)
            return
        dic[mo[1]] = tag.string.strip() if tag.string else ''

    soup = BeautifulSoup(page, 'lxml')
    ins = {}
    outs = {}
    for tag in soup.find_all('h3'):
        sub(tag, r'(?:Sample\s*Input|入力例)\s*(\d+)', ins)
        sub(tag, r'(?:Sample\s*Output|出力例)\s*(\d+)', outs)
    for i in ins:
        if i not in outs: continue
        infile  = f'{qid}/{util.in_file(i)}'
        outfile = f'{qid}/{util.exp_file(i)}'
        # if fKeep and (os.path.exists(infile) or os.path.exists(outfile)):
        #     continue
        with open(infile, 'w') as wfp:
            if ins[i]:
                print(ins[i], file=wfp)
        with open(outfile, 'w') as wfp:
            if outs[i]:
                print(outs[i], file=wfp)

def makeMakefile(path):
    with open(path, 'w', encoding='UTF-8') as wfp:
        print('''
CXX := g++

ifeq ($(DEBUG),)
  DEBUGFLAGS := -O2
else
  DEBUGFLAGS := -g -O0 -D_GLIBCXX_DEBUG -DDEBUG=1
  ifneq ($(DEBUG_LIB),)
    DEBUGFLAGS := $(DEBUGFLAGS) -DDEBUG_LIB=1
  endif
endif

WARNINGS := -Wall -Wno-format-security -Wshadow -fconcepts

CXXFLAGS := -std=gnu++17 $(DEBUGFLAGS) $(WARNINGS)

CXXFLAGS := $(CXXFLAGS) -I/home/y-tanabe/lib/boost_1_73_0
CXXFLAGS := $(CXXFLAGS) -I/home/y-tanabe/proj/compprog/clib/ac-library
CXXFLAGS := $(CXXFLAGS) $(if $(CMPNAIVE),-DCMPNAIVE=1)
CXXFLAGS := $(CXXFLAGS)

all: cans

clean:
	$(RM) cans.o cans cans.exe *~ *.stackdump core
''', file=wfp)

def makeSource(path):
    with open(path, 'w', encoding='UTF-8') as wfp:
        print('''#include <bits/stdc++.h>
#include <cassert>
typedef long long int ll;
using namespace std;
// #include <atcoder/all>
// using namespace atcoder;
#define REP(i, a, b) for (ll i = (a); i < (b); i++)
#define REPrev(i, a, b) for (ll i = (a); i >= (b); i--)
#define ALL(coll) (coll).begin(), (coll).end()
#define SIZE(v) ((ll)((v).size()))
#define InpVec(vec, n) vector<ll> vec(n); REP(i, 0, (n)) cin >> vec[i]
#define REPOUT(i, a, b, exp, sep) REP(i, (a), (b)) { if (i != (a)) cout << (sep); cout << (exp); } cout << "\\n"

// @@ !! LIM()

int main(/* int argc, char *argv[] */) {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << setprecision(20);

  return 0;
}
''', file=wfp)

def doQuest(qid, url):
    # debug('doQuest ', qid, url)
    if not os.path.exists(qid):
        os.mkdir(qid)
    p = f'{qid}/q.html'
    page = getPage(url)
    with open(p, 'w', encoding='UTF-8') as wfp:
        print(page, end='', file=wfp)
    with open(p, 'r', encoding='UTF-8') as fp:
        page = fp.read()
        # It may seem that in the case of
        # "not (fKeep and os.apth.exists(p)" you do not need to read again,
        # but this code forces translation from \r\n to \n.
    extractEg(qid, page)

    makeMakefile(f'{qid}/Makefile')
    makeSource(f'{qid}/cans.cc')

def getContestName(name):
    cnFile = ".contestName"
    if name:
        with open(cnFile, 'w') as wfp:
            print(name, file=wfp)
        return name
    if os.path.exists(cnFile):
        with open(cnFile, 'r') as fp:
            return fp.readline().strip()
    return os.path.basename(os.getcwd())

def main():
    global args
    args = parseArgs()

    if args.url:
        qdict = {args.url[-1]: args.url}
    elif args.quest or args.all_questions:
        qdict = quest(getContestName(args.contest))
    else:
        die('No question is specified.')

    for q in qdict:
        if os.path.exists(q):
            die(f'File or directory {q} exists.')

    for q in qdict:
        doQuest(q, qdict[q])

def parseArgs():
    parser = argparse.ArgumentParser(
        description='''Reads AtCoder questions, extracts input/output examples,
        makes a makefile and cans.cc.
'''
    )
    # parser.add_argument(
    #     '-e', '--existing', type=str,
    #     choices=['keep', 'overwrite', 'k', 'o'],
    #     help="If 'k' or 'keep' is specified, files are untouched; "
    #          "for 'o' or 'overwrite', files are overwritten."
    # )
    parser.add_argument(
        '-c', '--contest', type=str,
        help='''Contest identifier, such as abc147 or tdpc.
        If not specified, it is taken from the most recently specified name,
        which has been saved into ./.contestName, or the directory name.
        ''')
    parser.add_argument(
        '-a', '--all_questions', action='store_true',
        help='All questions will be retrieved.')
    # parser.add_argument(
    #     '--force', action='store_true',
    #     help='''Existing directories will be overwritten.  If not specified,
    #     an existing directory causes an error.
    #     ''')
    parser.add_argument(
        '--url', type=str,
        help='''Problem URL.  If specified, -a, -c and quest are ignored.
        The question identifier is taken from the last letter of the URL.
        ''')
    parser.add_argument(
        'quest', type=str, nargs='*',
        help='question identifier such as a or f')
    return parser.parse_args()

main()
