#!/usr/bin/env python3

from datetime import datetime, timedelta
from dateutil.parser import parse
import time, sys, re, subprocess, os, argparse, requests
import typing
from typing import Any

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..')
from util import warn, die, debug

args: Any = None

def msg(*m: str) -> None:
    if args.quiet:
        return
    print(*m, file=sys.stderr, flush=True)

def get_all_problem_info() -> dict[str, dict]:
    r = requests.get('https://kenkoooo.com/atcoder/resources/merged-problems.json')
    return {o['id'] : o for o in r.json()}

def get_problems(vc: dict) -> list[str]:
    r = requests.get(f'https://kenkoooo.com/atcoder/internal-api/contest/get/{vc["id"]}')
    return [o['id'] for o in r.json()['problems']]

def wait_until_start(vc_start: int) -> None:
    def unit(t: float) -> int:
        return 60 if t >= 60 else 10 if t >= 10 else 5 if t >= 5 else 1
    def round_down(t: float):
        u = unit(t)
        return u * int(t / u)

    day1 = timedelta(days=1)
    hour1 = timedelta(hours=1)
    sec1 = timedelta(seconds=1)
    dt_now = datetime.now()
    tspec = args.starts_at
 
    vc_start_time = datetime.fromtimestamp(vc_start)
    if not tspec:
        start_time = vc_start_time + 0.9 * sec1
    elif tspec == "now":
        start_time = dt_now - sec1
    else:
        def near(t):
            return t if dt_now - hour1 <= t and t <= dt_now + hour1 else None
        start_time = parse(tspec)
        start_time = near(start_time) or near(start_time + day1) or near(start_time - day1)
        if not start_time:
            die("`starts_at' time should be within one hour from now.")
    if start_time < vc_start_time:
        die ("`starts_at` time should not be before contest.")

    while True:
        rest = (start_time - dt_now).total_seconds()
        if rest < 0.05:
            break
        msg(f'Starts in {int(rest + 0.5)} seconds')
        w = round_down(rest - 0.05)
        time.sleep((start_time - dt_now).total_seconds() - w)
        dt_now = datetime.now()


def dir_check() -> None:
    fs = os.listdir('.')
    if not (len(fs) == 0 or args.force):
        die('Current directory is not empty.  Consider --force.')
    cnt = 0
    for f in fs:
        if len(f) == 1 or re.match(r'\d+$', f):
            warn(f'Existing file or directory {f} may be a problem.')
            cnt += 1
            if cnt == 5:
                warn(f'There may be other problematic files.')
                break
    if cnt > 0:
        die('Problematic files in the current directory.')

def search_vc() -> dict:
    r = requests.get('https://kenkoooo.com/atcoder/internal-api/contest/recent')
    contests = r.json()
    matched_contests = [o for o in contests if re.search(args.exp, o['title'])]
    if len(matched_contests) == 0:
        die('No matched contests')
    elif len(matched_contests) >= 2:
        die('Two or more matched contests: ', ', '.join([o['title'] for o in matched_contests]))
    return matched_contests[0]


def main():
    global driver, args

    args = parseArgs()

    dir_check()
    vc = search_vc()
    wait_until_start(vc['start_epoch_second'])
    lst = get_problems(vc)

    all_problems = get_all_problem_info()

    success = []
    for (i, p_id) in enumerate(lst):
        pi = all_problems[p_id]
        (p_name, contest_id) = (pi['name'], pi['contest_id'])
        p_url = f'https://atcoder.jp/contests/{contest_id}/tasks/{p_id}'
        cmd = ['qread', '--url', p_url]
        msg(f'Downloading question {i + 1}: {p_name}')
        rc = subprocess.run(cmd)
        if rc.returncode != 0:
            warn(f'qread failed with url {p_url}')
        else:
            success.append(i + 1)
        if os.path.exists(p_url[-1]):
            os.rename(p_url[-1], f'{i + 1}_tmp')
    for i in success:
        os.rename(f'{i}_tmp', f'{i}')


def parseArgs():
    parser = argparse.ArgumentParser(
        description='''Read questions of a virtual contest''',
    )
    parser.add_argument(
        'exp', type=str,
        help='''Regular expression for the title of a virtual contest.''',
    )
    parser.add_argument(
        '-q', '--quiet', action='store_true',
        help='''Quiet mode'''
    )
    parser.add_argument(
        '--starts-at', type=str,
        help='''Time to start reading.  `now' means now.  If not specified, contest time is used.'''
    )
    parser.add_argument(
        '-f', '--force', action='store_true',
        help='''Execute even when directory is not empty.'''
    )
    return parser.parse_args()

main()

