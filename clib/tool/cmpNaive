#!/usr/bin/env python3

import argparse, subprocess, os, sys, queue, time
from threading import Timer, Thread, Lock
sys.path.append('/home/y-tanabe/WinHome/bytime/atCoder1710/clib/tool')
from util import Util, warn, die, debug

args = None
end_mark = '^__=end=__^'
end_file_mark = '^__=end_file=__^'

# def ceFile(id): return f'd{id}.txt'
# def ceAFile(id): return f'do{id}.txt'
# def ceTFile(id): return f'd_tmp_{id}.txt'

def getCeID(ce):
    def chk(p):
        if os.path.exists(p): die(f'{p} exists.')

    if ce:
        chk(Util.in_file(ce))
        chk(Util.exp_file(ce))
        return ce
    i = 1
    while True:
        ce = f'x{i}'
        if not (os.path.exists(Util.in_file(ce))
                or os.path.exists(Util.exp_file(ce))):
            break
        i += 1
    return str(ce)

def env_check():
    if not os.environ['CMPNAIVE']:
        die('Environment variable CMPNAIVE not defined.  Have you compiled ./cans with CMPNAIVE set?')

def my_popen(cmd, show_stderr=False):
    return subprocess.Popen(
        cmd, encoding='UTF-8',
        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        stderr=None if show_stderr else subprocess.DEVNULL)


def choose_from_cands(path, cands):
    if path is None:
        for p in cands:
            if os.path.exists(p):
                return p
        die(f'Failed to found any of {cands}')
    elif not os.path.exists(path.split()[0]):
        die(f'Path {path.split()[0]} does not exists.')
    else:
        return path

def read_until_end_mark(fp):
    ret = ''
    while True:
        line = fp.readline()
        if line == '':
            raise MyUnexpEOF
        if line.strip() == end_mark:
            return ret
        if line.strip() == end_file_mark:
            if ret == '':
                raise MyEOF
            else:
                raise ValueError
        ret += line
    return ret

class MyEOF(Exception):
    pass
class MyUnexpEOF(Exception):
    pass

def myfunc(obj):
    debug('myfunc', obj.count)
    obj.timeout()


class Gen:

    def __init__(self, path):
        self.path = choose_from_cands(path, ['./gen', './gen.py'])
        self.count = 0
        self.timer = None
        self.lock = Lock()
        self.prev = 0

    def __enter__(self):
        self.proc = my_popen([self.path, '-r']).__enter__()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.proc.__exit__(exc_type, exc_value, traceback)
        if self.timer:
            self.timer.cancel()
            self.timer = None

    def timeout(self):
        # debug('in timeout')
        if self.lock.acquire(blocking=True):
            self.timer = None
            self.lock.release()
        # debug('out timeout')

    def get_question(self):
        if False:
            # debug('before acquire')
            if self.lock.acquire(blocking=False):
                # debug('... in acquire')
                if self.timer is None:
                    debug('... ... in time reset')
                    if self.count > 0:
                        print(self.count, end=' ', file=sys.stderr, flush=True)
                    # self.timer = Timer(0.5, self.timeout)
                    self.timer = Timer(0.5, myfunc, args=[self])
                    self.timer.start()
                    debug('... ... ... timer start')
                self.lock.release()
        else:
            cur = time.time()
            if cur - self.prev > 0.5:
                if self.count > 0:
                    print(self.count, end=' ', file=sys.stderr, flush=True)
                self.prev = cur
            # if self.count % 100 == 0:
            #     print(self.count, end=' ', file=sys.stderr, flush=True)
            #     print(time.time())
        self.count += 1
        # debug('count=', self.count)
        return read_until_end_mark(self.proc.stdout)


class InOut:
    pass

class IndepInOut(InOut):

    def __init__(self, body_path, naive_path):
        self.body = choose_from_cands(body_path, ['./cans', './cans.py'])
        if not args.ec_only:
            self.naive = choose_from_cands(naive_path, ['./naive', './naive.py'])

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        pass

    def prog(self):
        return self.body

    def run_naive(self, s_question):
        return self.run_either(s_question, [self.naive], None)

    def run_body(self, s_question):
        return self.run_either(s_question, self.body.split(), args.show_stderr)

    def run_either(self, s_question, cmd, ss):
        try:
            (rc, results) = Util.run(cmd, input=s_question,
                                     show_stderr=ss, timeout=args.timeout)
            if rc != 0:
                return (None, 'died')
            return (results, '')
        except subprocess.TimeoutExpired:
            return (None, 'timed out')

class ContiInOut(InOut):

    def __init__(self, path):
        self.path = choose_from_cands(path, ['./cans', './cans.py'])
        self.living = False
        
    def enque_output(self):
        while True:
            line = self.proc.stdout.readline()
            self.queue.put(line)
            if line == '':
                break

    def __enter__(self):
        self.proc = my_popen([self.path, 'cmpNaive'],
                              show_stderr=args.show_stderr
        )
        # ).__enter__()
        self.living = True
        self.queue = queue.Queue()
        self.thread = Thread(target=self.enque_output)
        # self.thread.daemon = True
        self.thread.start()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if self.living:
            print('Q', file=self.proc.stdin)
        try:
            self.proc.terminate()
            self.proc.wait(timeout=0.5)
        except subprocess.TimeoutExpired:
            self.proc.terminate()
        try:
            self.proc.wait(timeout=0.5)
        except subprocess.TimeoutExpired:
            self.proc.kill()
        # self.proc.__exit__(exc_type, exc_value, traceback)

    def prog(self):
        return self.path

    def run_naive(self, s_question):
        return self._send_question('N', 'naive', s_question)
        
    def run_body(self, s_question):
        return self._send_question('B', 'body', s_question)
        
    def _send_question(self, mark, pstr, s_question):
        print(mark, file=self.proc.stdin)
        print(s_question, file=self.proc.stdin)
        print(end_mark, file=self.proc.stdin, flush=True)
        res = ''
        while True:
            try:
                rline = self.queue.get(timeout=args.timeout)
                # rline = self.proc.stdout.readline()
            except queue.Empty:
                warn(f'\nTest Program ({pstr}) times out.')
                self.living = False
                return (None, 'timed out')
            if rline == '':
                warn(f'\nTest Program ({pstr}) seems to die.')
                self.living = False
                return (None, 'died')
            if rline.strip() == end_mark:
                return (res, '');
            res += rline

def get_Gen_object():
    return Gen(args.gen)

def get_IO_object():
    if args.independent:
        return IndepInOut(args.program, args.naive)
    else:
        return ContiInOut(args.program)

# def run_stest(prog, ceID):
#     warn(f'Running stest ...\n')
#     subprocess.run(['stest', '-p', prog, ceID])

def run_prgms(dio, s_question, prec):
    (s_body, mt_body) = dio.run_body(s_question)
    if s_body is None:
        return (f'body program has {mt_body}.', None, None);
    if args.ec_only:
        return (None, None, None)
    elif args.judge:
        (j_out, mt) = dio.run_naive(s_question + s_body)
        if j_out is None:
            return (f'judge program has {mt}.', None, None);
        elif j_out[:2] != 'OK':
            return ('judge program returns NG.', s_body, '');
        else:
            return (None, None, None)
    else:
        (s_naive, mt) = dio.run_naive(s_question)
        if s_naive is None:
            return (f'naive program has {mt}.', None, None)
        elif not Util.compare_answer(s_body, s_naive, prec=prec,
                                     ignoreSpace=not args.no_ignore_space):
            return ('results differ.', s_body, s_naive)
        else:
            return (None, None, None)

def main_loop():
    global rep_count
    ceID = getCeID(args.ce)
    prec = Util.get_prec(args.double_one, not args.no_modify_precision)
    with get_Gen_object() as gio, get_IO_object() as dio:
        for i in range(args.repeat):
            try:
                s_question = gio.get_question()
            except MyUnexpEOF as e:
                die('Input generator seems to die.')
            except MyEOF as e:
                break
            (msg, s_body, s_naive) = run_prgms(dio, s_question, prec)
            if msg is not None:
                warn(f'\nFATAL: id = {ceID}: {msg}')
                warn(f'-- input ({Util.in_file(ceID)}) --')
                warn(s_question.strip())
                with open(Util.in_file(ceID), 'w') as fp:
                    print(s_question, file=fp, end='')
                if s_naive is not None:
                    if not args.judge:
                        with open(Util.exp_file(ceID), 'w') as fp:
                            print(s_naive, file=fp, end='')
                        Util.print_answer(Util.exp_file(ceID))
                    if s_body is not None:
                        with open(Util.act_file(ceID), 'w') as ofp:
                            print(s_body, file=ofp, end='')
                        Util.print_answer(Util.act_file(ceID))
                return
    warn('\nNo problems were found.')
                
def parse_args():
    ap = argparse.ArgumentParser(
        # formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''Compares the output of an executable such as ./cans 
        and another such as ./naive, using the output of generator program,
        such as ./gen.py.
        If --judge is specified, judges whether it is ok or using
        a judge program; again named './naive' or './cans naive'.
        In this case, give to the judge program the input followed by
        the result.  The judge program should output 'OK\\n' or 'NG\\n'.
        '''
    );
    ap.add_argument('-j', '--judge', action='store_true',
                    help='use a judge program, instead of comparing results')
    ap.add_argument('-i', '--independent', action='store_true',
                    help='test and compare programs are different.  If not specified, self-comparable test program is assumed.')
    ap.add_argument('-p', '--program', metavar='PROG',
                    help='program to test.')
    ap.add_argument('-n', '--naive', metavar='NAIVE',
                    help='program to compare.')
    ap.add_argument('-g', '--gen', metavar='GEN',
                    help='program to generate inputs')
    ap.add_argument('-d', '--double-one', type=int, metavar='n',
                    help='treats as double.')
    ap.add_argument('-c', '--ce', help='ID for counterexample',
                    metavar = 'ID')
    ap.add_argument('-e', '--exit-code-only', action='store_true',
                    dest='ec_only', help='ok if exit code is zero.')
    ap.add_argument('--no-modify-precision', action='store_true',
                    help='does not modify ./stest-double.')
    ap.add_argument('--no-ignore-space', action='store_true',
                    help='Spaces matter when comparing answers')
    ap.add_argument('--show-stderr', action='store_true',
                        help='how output to stderr')
    ap.add_argument('--timeout', default=1.0, type=float,
                    help='time to wait for body/naive program')
    ap.add_argument('repeat', type=int, nargs='?', default=1000000,
                    help = 'repeat count')
    return ap.parse_args()

def arg_check():
    if args.ec_only and not args.independent:
        die(f'Sorry, --exit-code-only is only effective with --indenendent.')

def main():
    global args
    args = parse_args()
    arg_check()
    env_check()
    main_loop()

main()
