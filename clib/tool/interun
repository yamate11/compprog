#!/usr/bin/env python3

import sys
import argparse
import subprocess
from subprocess import Popen, PIPE
from selectors import DefaultSelector, EVENT_READ

logfile = None

def abort(*msg):
    log(*msg)
    print(*msg, file=sys.stderr, flush=True)
    sys.exit(1)

def log(*msg):
    print(*msg, file=logfile, flush=True, end='')

def main():
    global logfile
    args = parse_args()

    judge = args.judge
    cans = args.program
    logfile = open(args.log, 'w', encoding='UTF-8')
    p_judge = Popen([judge], encoding='UTF-8', stdin=PIPE, stdout=PIPE)
    p_cans = Popen([cans], encoding='UTF-8', stdin=PIPE, stdout=PIPE)
    
    for line in sys.stdin:
        log('init: ', line)
        print(line, file=p_judge.stdin, end='', flush=True)
    sel = DefaultSelector()
    sel.register(p_judge.stdout, EVENT_READ, 0)
    sel.register(p_cans.stdout, EVENT_READ, 1)
    name = [judge, cans]
    proc = [p_judge, p_cans]
    closed = []
    all_closed = False
    while not all_closed:
        lst = sel.select(1.0)
        if not lst:
            for i in range(2):
                if i not in closed:
                    proc[i].kill()
            abort('timeout occurred.')
        # if len(lst) != 1:
        #     abort('select length not 1')
        for (s, e) in lst:
            # (s, e) = lst[0]
            msg = s.fileobj.readline()
            if msg == '':
                log(f'{name[s.data]} terminated.\n')
                sel.unregister(s.fileobj)
                closed.append(s.data)
                if (len(closed) == 2):
                    all_closed = True
            elif msg[0] == '#':
                log(f'(internal) {msg}')
                print(msg, end='')
            else:
                peer = proc[1 - s.data]
                log(f'{name[s.data]}->{name[1 - s.data]}: {msg}')
                print(msg, file=peer.stdin, end='', flush=True)
    p_judge.wait()
    # log('*** ', p_judge.returncode, '\n')
    sys.exit(p_judge.returncode)
    
def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''Runs cans and judge programs for an interactive problem.

Judge program should first read some lines that specifies the problem parameter
from stdin, then communicates with the cans program, using stdin and stdout.
As exceptions, if the first character of a line of the judge's output is '#',
then the line is regarded as a message to the user, and send to the stdout
of this script.  So a typical implementation of judge is something like:

n = int(input())
while True:
    tp, s = input().split()
    if tp == '?':
        print('GE' if int(s) >= n else 'LT', flush=True)
    elif tp == '!':
        print('# AC' if int(s) == n else '# WA', flush=True)
        break
''')
    parser.add_argument('-p', '--program', default='./cans', metavar='PROG',
                        help='program to test.  Default is ./cans')
    parser.add_argument('-j', '--judge', default='./judge', 
                        help='program to judge.  Default is ./judge')
    parser.add_argument('-l', '--log', default='./a.log',
                        help='log file name')
    return parser.parse_args()

main()
